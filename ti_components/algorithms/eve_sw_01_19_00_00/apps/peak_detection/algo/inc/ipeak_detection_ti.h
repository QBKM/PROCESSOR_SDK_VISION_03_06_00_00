/*
*
* Copyright (c) 2009-2017 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/


/**
 *  @file       ipeak_detection_ti.h
 *
 *  @brief      This file defines the interface for Peak detection
 *               applet.
 *  @version 0.0 (Apr 2017) : Base version.
 */

/** @ingroup    ti_ivision_PEAK_DETECTION */
/*@{*/
#ifndef IPEAK_DETECTION_TI_H_
#define IPEAK_DETECTION_TI_H_

#include <ivision.h>
#include <ti/xdais/ires.h>


/**
 * @brief The unique const funtion table for the PEAK_DETECTION_TI.
 */
extern const IVISION_Fxns PEAK_DETECTION_TI_VISION_FXNS;

/**
* @brief IRES interface of the PEAK_DETECTION_TI_ algorithm
*/
extern const IRES_Fxns PEAK_DETECTION_TI_IRES;


#define PEAK_DETECTION_TI_MAX_NUM_CHUNKS (8U)


/**
  @brief Following enums describes the error codes generated by this applet

  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_CONFIGURATION : Indicates an
  un-supported configuration

  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_BUF_DESCRIPTOR : Indicates an
  un-supported buffer descriptor

  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_NOISE_LENGTH : Indicates an
  un-supported noise length

  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_DOPPLER_DIMENSION : Indicates
  an un-supported doppler dimension

*/
typedef enum
{
  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_CONFIGURATION = IALG_CUSTOMFAILBASE,
  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_BUF_DESCRIPTOR,
  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_NOISE_LENGTH,
  PEAK_DETECTION_TI_ERRORTYPE_UNSUPPORTED_DOPPLER_DIMENSION,
  PEAK_DETECTION_TI_ERRORTYPE_MAX_ERROR_CODE
} PEAK_DETECTION_TI_ErrorType;


/**
  @brief User provides most of the information through buffer descriptor
         during process call. Below enums define the purpose of buffer. For optimal
         performance all the buffers should be aligned to 128 bytes boundary.

  PEAK_DETECTION_TI_BUFDESC_IN_ANTENNA_DATA_BUF: This buffer descriptor provides the
  pointer to a buffer which contains the radar cube data (antenna data) computing after range and doppler FFT. The properties of
  this buffer is described using  PEAK_DETECTION_TI_BufferDescriptor structure. Each input sample contains
  real and imaginery data stored in interleave manner with each entry being 16 signed number. Arrangement of
  data is expected to be as shown beflow
  A0C0S0,A0C0S1 ..... A0C0Sn-1,A1C0S0,A1C0S1 ..... A1C0Sn-1,Ak-1C0S0,Ak-1C0S1 ..... Ak-1C0Sn-1
  A0C1S0,A0C1S1 ..... A0C1Sn-1,A1C1S0,A1C1S1 ..... A1C1Sn-1,Ak-1C1S0,Ak-1C1S1 ..... Ak-1C1Sn-1
  :
  :
  A0Cm-1S0,A0Cm-1S1 ..... A0Cm-1Sn-1,A1Cm-1S0,A1Cm-1S1 ..... A1Cm-1Sn-1,Ak-1Cm-1S0,Ak-1Cm-1S1 ..... Ak-1Cm-1Sn-1
  A0C0Sn,A0C0Sn+1 ..... A0C0S2n-1,A1C0Sn,A1C0Sn+1 ..... A1C0S2n-1,Ak-1C0Sn,Ak-1C0Sn+1 ..... Ak-1C0S2n-1
  A0C1Sn,A0C1Sn+1 ..... A0C1S2n-1,A1C1Sn,A1C1Sn+1 ..... A1C1S2n-1,Ak-1C1Sn,Ak-1C1Sn+1 ..... Ak-1C1S2n-1
  :
  :
  and so on.

  Here Ak = Represents kth antenna
         Ck = Represents kth chirp
         Sk = Represents kth sample.

         n = num contigous samples corresponding to a single antenna. This should be multiple of 8.
         m = Doppler dimension


  Here each entry is stored as real and imaginary part interleaved together. It is important to note that
  only following parameters of this structure are used by  this applet :
  bufDesc[]->bufPlanes[].buf
  bufDesc[]->bufPlanes[].accessMask

  PEAK_DETECTION_TI_BUFDESC_IN_TOTAL :
  Total number of input buffers.
*/

typedef enum
{
  PEAK_DETECTION_TI_BUFDESC_IN_ANTENNA_DATA_BUF = 0,
  PEAK_DETECTION_TI_BUFDESC_IN_TOTAL  = 1
} PEAK_DETECTION_TI_InBufOrder ;


/**
  @brief User provides most of the information through buffer descriptor
         during process call. Below enums define the purpose of out buffer. For optimal
         performance all the buffers should be aligned to 128 byte boundary.

  PEAK_DETECTION_TI_BUFDESC_OUT_BUFFER: This buffer will return different output based on
  the PEAK_DETECTION_TI_CfarCaDbCreateParams.detectionMethod.
  If  detectionMethod == PEAK_DETECTION_TI_METHOD_CFARCA_DB then
  This buffer stores the list of  range and doppler coordinates for detected objects in interleaved manner
  with range in the upper 16 bit and doppler in lower 16  bit. Size of this buffer should be the worst case
  size of the coordinates which is range x doppler x 4.
  It is important to note that only following enteries from this structure are used by
  this applet :
  bufDesc[]->bufPlanes[].buf
  bufDesc[]->bufPlanes[].accessMask

  If  detectionMethod == PEAK_DETECTION_TI_METHOD_ENERGY_OUT then
  This buffer will store the energy which is actually the sum of energy at each point
  for all the antennas in log2 format. Each entry is 16bit wide. size of this buffers should be
  range x doppler x 2
  It is important to note that only following enteries from this structure are used by
     this applet :
     bufDesc[]->bufPlanes[].buf
     bufDesc[]->bufPlanes[].accessMask

  PEAK_DETECTION_TI_BUFDESC_OUT_ENERGY_BUFFER: This buffer stores the list of
  16 bit container.
  It is important to note that only following enteries from this structure are used by
  this applet :
  bufDesc[]->bufPlanes[].buf
  bufDesc[]->bufPlanes[].accessMask

  PEAK_DETECTION_TI_BUFDESC_OUT_ANTENNA_DATA: This buffer is to store the antenna
  data corresonding to each detection. This is an optional buffer and is required only if
  user wants to get the antenna data corresponding to the detected object. The data in
  this buffer is arranged as numAntennas x numDetections. Buffer is expected to look as shown below :

           __|A0| A1| A2|........ |Ak |
           D0|
           D1|
           D2|
              |
              |
          Dn |
    It is important to note that only following enteries from this structure are used by
    this applet :
    bufDesc[]->bufPlanes[].buf
    bufDesc[]->bufPlanes[].accessMask

  PEAK_DETECTION_TI_BUFDESC_OUT_TOTAL :
  Total number of output buffers.
*/

typedef enum
{
  PEAK_DETECTION_TI_BUFDESC_OUT_BUFFER = 0,
  PEAK_DETECTION_TI_BUFDESC_OUT_ENERGY_BUFFER = 1,
  PEAK_DETECTION_TI_BUFDESC_OUT_ANTENNA_DATA = 2,
  PEAK_DETECTION_TI_BUFDESC_OUT_TOTAL  = 3
} PEAK_DETECTION_TI_OutBufOrder ;

/**
  @brief Supported detection methods

  PEAK_DETECTION_TI_METHOD_CFARCA_DB: Peak detection method use is
  Constant false alarm rate, cell averaging in log domain.
  In this method threshold level is calculated by estimating the level of noise
  floor around the cell under test (CUT). The cell under test (CUT) is compared
  against an average noise floor. The noise cells (which are used to compute the
  noise floor) are located on either side of the CUT. The CUT is separated from the
  noise cells by guard cells. There are noiseLen noise samples on either side of
  the CUT. Similarly there are guardLen samples on either side of the CUT,
  separating it from the noise samples.
  CFAR CA detector equation is
     CUT > Threshold * NoiseFloor
     In log domain this becomes
     log(CUT) - Log(NoiseFloor) > log(Threshold)

   PEAK_DETECTION_TI_METHOD_ENERGY_OUT : In this method energy sum across
   all the antennas is computed and returned via output bufdescriptor with enumeration
   number PEAK_DETECTION_TI_BUFDESC_OUT_BUFFER.
*/
typedef enum
{
  PEAK_DETECTION_TI_METHOD_CFARCA_DB,
  PEAK_DETECTION_TI_METHOD_ENERGY_OUT
} PEAK_DETECTION_TI_METHOD;


/**
  @struct PEAK_DETECTION_TI_BufferDescriptor
  @brief  This structure is used to describe the buffers (input/output) to this applet.
            This descriptor represents the buffer in the unit of Antenna. We assume the same format
            across the antenna. Kindly refer section 3.29.2 in EVE_Applets_UserGuide.pdf to see few
            examples for the usage of this structure

@param numChunks
            If data for a single antenna cannot be represented within a maximum supported pitch then we
            will have to split the buffer into smaller chunk such that each chunk
            can represent the data of single antenna within with a pitch. This field represents this
            number of such chunks.

@param  numHorzPoints
             Number of contigous points in Horizontal direction corresponding to a single antenna. This
             is an array of size equal to numChunks field in this structure.

@param numVertPoints
            Number of contigous points in vertical direction corresponding to a single antenna.
            The contiguity is defined in terms of  the pitch field in this structure.

@param offsetBwAntennas
            Offset in terms of number of bytes to jump to next antenna data from the current base pointer.
            This field is also an array having numChunks enteries. This should be word aligned

@param pitch
            Offset in terms of number of bytes to jump to the next sample corresponding to the same
            antenna. This field is also an array having numChunks enteries. Pitch should be word algined

@param  numAntennas
              This field is meant for radar processing usecase. This tells the total number of anetnna data which
              is coming with the buffer.

*/
typedef struct
{
  uint8_t        numChunks;
  uint16_t       numHorzPoints[PEAK_DETECTION_TI_MAX_NUM_CHUNKS];
  uint16_t       numVertPoints;
  uint32_t       offsetBwAntennas[PEAK_DETECTION_TI_MAX_NUM_CHUNKS];
  uint32_t       pitch[PEAK_DETECTION_TI_MAX_NUM_CHUNKS];
  uint16_t       numAntennas;
} PEAK_DETECTION_TI_BufferDescriptor;

/**
  PEAK_DETECTION_TI_CfarCaDbCreateParams
@brief  This structure defines the create time parameter needed for CFAR CA DB detection algorithm.

@param maxNoiseLen
              Maximum noise length. Only required if detectionMethod is
              PEAK_DETECTION_TI_METHOD_CFARCA_DB

@param maxGaurdLen
              Maximum gaurd length. Only required if detectionMethod is
              PEAK_DETECTION_TI_METHOD_CFARCA_DB


*/
typedef struct
{
  uint16_t       maxNoiseLen;
  uint16_t       maxGaurdLen;
} PEAK_DETECTION_TI_CfarCaDbCreateParams;


/**
  PEAK_DETECTION_TI_CfarCaDbParams
  @brief  This structure defines the parameter needed for CFAR CA DB detection algorithm.

@param  noiseLen
            One sided noise Length. Noise Length should be power of 2.

@param  gaurdLen
            One sided gaurd Len. These are the samples which are skipped from each side
            of Cell Under Test (CUT) for calculating the noise floor

@param constant1
            Two parameters C1 and C2 used for thresholding in CFAR CA detector.
            The equation is  CUT > AverageNoiseFloor * C1/2^C2
@param constant2
            Two parameters C1 and C2 used for thresholding in CFAR CA detector.
            The equation is  CUT > AverageNoiseFloor * C1/2^C2
*/
typedef struct
{
  uint16_t       noiseLen;
  uint16_t       gaurdLen;
  uint16_t       constant1;
  uint16_t       constant2;
} PEAK_DETECTION_TI_CfarCaDbParams;

/**
 @struct  PEAK_DETECTION_TI_AlgoCreateParams
 @brief   This struct define the detection algorithm specific create parmeters of all the
          suported detection methods by this applet

@param   cfarCaDb
            Create time parameter to be used if detection method is
            PEAK_DETECTION_TI_METHOD_CFARCA_DB

*/
typedef struct {
  PEAK_DETECTION_TI_CfarCaDbCreateParams cfarCaDb;
}PEAK_DETECTION_TI_AlgoCreateParams;

/**
 @struct  PEAK_DETECTION_TI_AlgoCreateParams
 @brief   This struct define the detection algorithm specific run time parmeters of all the
          suported detection methods by this applet

@param  cfarCaDb
            Run time parameter to be used if detection method is
            PEAK_DETECTION_TI_METHOD_CFARCA_DB
*/
typedef struct {
  PEAK_DETECTION_TI_CfarCaDbParams cfarCaDb;
}PEAK_DETECTION_TI_AlgoParams;

/**
  @struct PEAK_DETECTION_TI_CreateParams
  @brief  This structure contains all the parameters needed
              at create time for this applet

@param  maxNumAntenna
              Maximum number of antennas in the system

@param maxNumTx
              Maximum number of transmitter antennas in system

@param maxRangeDimension
              Maximum range dimension

@param maxDopplerDimension
              Maximum doppler dimension

@param detectionMethod
              Method to be used for detection of objects. Refer
              PEAK_DETECTION_TI_METHOD to know the supported
              methods.

@param enableAntennaDataOut
              If enabled the applet will extract the antenna data corresponding
              to the detection and returns as one of the output bufffer
              (PEAK_DETECTION_TI_BUFDESC_OUT_ANTENNA_DATA).

@param   algoCreateParams
              Algorithm specific create time parameter. For supported
              algorithms refer PEAK_DETECTION_TI_METHOD

*/
typedef struct
{
  IVISION_Params visionParams;
  uint16_t       maxNumAntenna;
  uint16_t       maxNumTx;
  uint16_t       maxRangeDimension;
  uint16_t       maxDopplerDimension;
  uint8_t        detectionMethod;
  uint8_t        enableAntennaDataOut;
  PEAK_DETECTION_TI_AlgoCreateParams algoCreateParams;
} PEAK_DETECTION_TI_CreateParams;


/**
  @struct PEAK_DETECTION_TI_InArgs
  @brief  This structure contains all the parameters which are given as an
          input to  Peak Detection applet at frame level

  @param  iVisionInArgs
                Common InArgs  for all ivision based modules

@param  enableTxDecoding
             Enable/Disable Tx decoding. A value of 1 enables tx decoding

  @param  numTx
              Number of transmitters in the system.

  @param  numRx
              Number of receivers in the system.

 @param offsetBwTx
                Offset in bytes between two transmitters

@param offsetBwRx
               Offset in bytes between two receivers

@param txDecodingCoefficients
              Coefficients required for tx decoding. This is only
              required if enableTxDecoding = 1. This is a matrix of
              numTx X numTx elements. For Tx decoding data received at each transmitter
              is multiplied by Tx decoding matrix to decode individual. The coefficients are
              expected to be in Q15 format.

@param  bufDescription
            The input buffers to this applet comes as part of input buf
            descriptors, but the arrange of data in these buffer is described using PEAK_DETECTION_TI_BufferDescriptor
            structure. This field hold the structure which describes the input buffers.

@param algoParams
            This structure is to provide Algorithm specific run time parameters.  For supported
              algorithms refer PEAK_DETECTION_TI_METHOD
*/

typedef struct
{
  IVISION_InArgs iVisionInArgs;
  uint8_t        enableTxDecoding;
  uint16_t       numTx;
  uint16_t       numRx;
  uint16_t       offsetBwTx;
  uint16_t       offsetBwRx;
  int16_t        *txDecodingCoefficients;
  uint16_t       rangeDim;
  uint16_t       dopplerDim;
  PEAK_DETECTION_TI_BufferDescriptor bufDescription;
  PEAK_DETECTION_TI_AlgoParams       algoParams;
} PEAK_DETECTION_TI_InArgs;


/**
  @struct PEAK_DETECTION_TI_OutArgs
  @brief  This structure contains all the parameters which are given as an
          output by this applet at frame level

  @param  iVisionOutArgs
          Common outArgs for all ivison based modules

  @param numDetections
           Number of detected objects
*/

typedef struct
{
  IVISION_OutArgs iVisionOutArgs;
  uint16_t        numDetections;
} PEAK_DETECTION_TI_OutArgs;


/*@}*/
/* ti_ivision_PEAK_DETECTION */

#endif /*IPEAK_DETECTION_TI_H_ */
/*==========================================================================*/
/*     END of the FILE                                                      */
/*==========================================================================*/

