/*
*
* Copyright (c) 2008-2017 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/



/**
 *  @Component:   EDEN
 *
 *  @Filename:    baseaddress.h
 *
 *  @Description: Generic header for CONFIG view of the EDEN
 *
 *  Generated by: Socrates CRED generator 
 *
 *//* ====================================================================== */

#ifndef __BASEADDRESS_H
#define __BASEADDRESS_H

#ifdef __cplusplus
extern "C"
{
#endif

/* =============================================================================
 * EXPORTED DEFINITIONS
 * =============================================================================
 */


/*-------------------------------------------------------------------------*//**
 * @DEFINITION   CRED_BASE_OFFSET
 *
 * @BRIEF        Base address offset
 *
 * @DESCRIPTION  Base address offset enabling address shift when defining 
 *               non-zero value. Defaulted to 0x0 here.
 *
 *//*------------------------------------------------------------------------ */
#ifndef CRED_BASE_OFFSET
  #define CRED_BASE_OFFSET     0x0ul
#endif

/*-------------------------------------------------------------------------*//**
 * @DEFINITION   CRED_NUM_INSTANCES
 *
 * @BRIEF        Number of instances.
 *
 * @DESCRIPTION  total number of EDEN component instances.
 *
 *//*------------------------------------------------------------------------ */
#define CRED_NUM_INSTANCES          39

/*
 * This section contains definition of macros symbols in order to avoid
 * possible re-definition of the index enum CRED_index_t in SW components.
 */
#define EDEN_GPIO                           EDEN_GPIO
#define OCMCRAM                             OCMCRAM
#define EVE1__MAILBOX                       EVE1__MAILBOX
#define SPINLOCK                            SPINLOCK
#define DRM                                 DRM
#define MIPI_STM                            MIPI_STM
#define CSETB                               CSETB
#define CSTF1                               CSTF1
#define EMIF4D                              EMIF4D
#define EVE1__DMEM                          EVE1__DMEM
#define EVE1__WBUF                          EVE1__WBUF
#define EVE1__IBUFLA                        EVE1__IBUFLA
#define EVE1__IBUFHA                        EVE1__IBUFHA
#define EVE1__IBUFLB                        EVE1__IBUFLB
#define EVE1__IBUFHB                        EVE1__IBUFHB
#define EVE1__EVE_CONTROL                   EVE1__EVE_CONTROL
#define EVE1__MMU0                          EVE1__MMU0
#define EVE1__MMU1                          EVE1__MMU1
#define EVE1__CTM                           EVE1__CTM
#define EVE1__TPTC0                         EVE1__TPTC0
#define EVE1__TPTC1                         EVE1__TPTC1
#define EVE1__SMSET_CONF                    EVE1__SMSET_CONF
#define EVE1__SMSET_SW                      EVE1__SMSET_SW
#define EVE1__TPCC0                         EVE1__TPCC0
#define EVE2__DMEM                          EVE2__DMEM
#define EVE2__WBUF                          EVE2__WBUF
#define EVE2__IBUFLA                        EVE2__IBUFLA
#define EVE2__IBUFHA                        EVE2__IBUFHA
#define EVE2__IBUFLB                        EVE2__IBUFLB
#define EVE2__IBUFHB                        EVE2__IBUFHB
#define EVE2__EVE_CONTROL                   EVE2__EVE_CONTROL
#define EVE2__MMU0                          EVE2__MMU0
#define EVE2__MMU1                          EVE2__MMU1
#define EVE2__CTM                           EVE2__CTM
#define EVE2__TPTC0                         EVE2__TPTC0
#define EVE2__TPTC1                         EVE2__TPTC1
#define EVE2__SMSET_CONF                    EVE2__SMSET_CONF
#define EVE2__SMSET_SW                      EVE2__SMSET_SW
#define EVE2__TPCC0                         EVE2__TPCC0

/*
 * This section contains definition of simple macros for physical address
 * enabling minimum code size (no need to use any of the predefined arrays)
 */
#define EDEN_GPIO_U_BASE                    (CRED_BASE_OFFSET + 0x08032000ul)
#define OCMCRAM_U_BASE                      (CRED_BASE_OFFSET + 0x40300000ul)
#define EVE1__MAILBOX_U_BASE                (CRED_BASE_OFFSET + 0x5908b000ul)
#define SPINLOCK_U_BASE                     (CRED_BASE_OFFSET + 0x080CA000ul)
#define DRM_U_BASE                          (CRED_BASE_OFFSET + 0x4B160000ul)
#define MIPI_STM_U_BASE                     (CRED_BASE_OFFSET + 0x4B161000ul)
#define CSETB_U_BASE                        (CRED_BASE_OFFSET + 0x4B162000ul)
#define CSTF1_U_BASE                        (CRED_BASE_OFFSET + 0x4B164000ul)
#define EMIF4D_U_BASE                       (CRED_BASE_OFFSET + 0x4C000000ul)
#define EVE1__DMEM_U_BASE                   (CRED_BASE_OFFSET + 0x59020000ul)
#define EVE1__WBUF_U_BASE                   (CRED_BASE_OFFSET + 0x59040000ul)
#define EVE1__IBUFLA_U_BASE                 (CRED_BASE_OFFSET + 0x59050000ul)
#define EVE1__IBUFHA_U_BASE                 (CRED_BASE_OFFSET + 0x59054000ul)
#define EVE1__IBUFLB_U_BASE                 (CRED_BASE_OFFSET + 0x59070000ul)
#define EVE1__IBUFHB_U_BASE                 (CRED_BASE_OFFSET + 0x59074000ul)
#define EVE1__EVE_CONTROL_U_BASE            (CRED_BASE_OFFSET + 0x59080000ul)
#define EVE1__MMU0_U_BASE                   (CRED_BASE_OFFSET + 0x59081000ul)
#define EVE1__MMU1_U_BASE                   (CRED_BASE_OFFSET + 0x59082000ul)
#define EVE1__CTM_U_BASE                    (CRED_BASE_OFFSET + 0x59085000ul)
#define EVE1__TPTC0_U_BASE                  (CRED_BASE_OFFSET + 0x59086000ul)
#define EVE1__TPTC1_U_BASE                  (CRED_BASE_OFFSET + 0x59087000ul)
#define EVE1__SMSET_CONF_U_BASE             (CRED_BASE_OFFSET + 0x59088000ul)
#define EVE1__SMSET_SW_U_BASE               (CRED_BASE_OFFSET + 0x59089000ul)
#define EVE1__TPCC0_U_BASE                  (CRED_BASE_OFFSET + 0x590A0000ul)
#define EVE2__DMEM_U_BASE                   (CRED_BASE_OFFSET + 0x69020000ul)
#define EVE2__WBUF_U_BASE                   (CRED_BASE_OFFSET + 0x69040000ul)
#define EVE2__IBUFLA_U_BASE                 (CRED_BASE_OFFSET + 0x69050000ul)
#define EVE2__IBUFHA_U_BASE                 (CRED_BASE_OFFSET + 0x69054000ul)
#define EVE2__IBUFLB_U_BASE                 (CRED_BASE_OFFSET + 0x69070000ul)
#define EVE2__IBUFHB_U_BASE                 (CRED_BASE_OFFSET + 0x69074000ul)
#define EVE2__EVE_CONTROL_U_BASE            (CRED_BASE_OFFSET + 0x69080000ul)
#define EVE2__MMU0_U_BASE                   (CRED_BASE_OFFSET + 0x69081000ul)
#define EVE2__MMU1_U_BASE                   (CRED_BASE_OFFSET + 0x69082000ul)
#define EVE2__CTM_U_BASE                    (CRED_BASE_OFFSET + 0x69085000ul)
#define EVE2__TPTC0_U_BASE                  (CRED_BASE_OFFSET + 0x69086000ul)
#define EVE2__TPTC1_U_BASE                  (CRED_BASE_OFFSET + 0x69087000ul)
#define EVE2__SMSET_CONF_U_BASE             (CRED_BASE_OFFSET + 0x69088000ul)
#define EVE2__SMSET_SW_U_BASE               (CRED_BASE_OFFSET + 0x69089000ul)
#define EVE2__TPCC0_U_BASE                  (CRED_BASE_OFFSET + 0x690A0000ul)
#define IC_U_BASE		            0x01800000

/* =============================================================================
 * EXPORTED TYPES
 * =============================================================================
 */

/*-------------------------------------------------------------------------*//**
 * @TYPE         CRED_instances_t
 *
 * @BRIEF        Component instance information.
 *
 * @DESCRIPTION  Variable of this type stores pointer to component instance 
 *               virtual address, physical address and its name string.
 *
 *//*------------------------------------------------------------------------ */

typedef struct t_CRED_instances_label
{
  REG_UWORD32       *virtAddr;  /** Virtual address - programmable */
  const REG_UWORD32 physAddr;   /** Physical address - fixed */
  UWORD32           size;       /** Size in Bytes */
  const char        *name;      /** Name string */
} CRED_instances_t;

/*-------------------------------------------------------------------------*//**
 * @TYPE         CRED_index_t
 *
 * @BRIEF        Index to component-instance arrays.
 *
 * @DESCRIPTION  This is enumeration of all the component instances which 
 *               allows indexing the component-instance arrays with instance
 *               name identifier.
 *
 *//*------------------------------------------------------------------------ */

typedef enum CRED_index_label
{
  EDEN_GPIO,                            /* 0 : 0x8032000 : EDEN_GPIO */
  OCMCRAM,                              /* 1 : 0x40300000 : OCMCRAM */
  EVE1__MAILBOX,                        /* 2 : 0x5908b000 : EVE1__MAILBOX */
  SPINLOCK,                             /* 3 : 0x80CA000 : SPINLOCK */
  DRM,                                  /* 4 : 0x4B160000 : DRM */
  MIPI_STM,                             /* 5 : 0x4B161000 : MIPI_STM */
  CSETB,                                /* 6 : 0x4B162000 : CSETB */
  CSTF1,                                /* 7 : 0x4B164000 : CSTF1 */
  EMIF4D,                               /* 8 : 0x4C000000 : EMIF4D */
  EVE1__DMEM,                           /* 9 : 0x59020000 : EVE_DMEM */
  EVE1__WBUF,                           /* 10 : 0x59040000 : EVE_DMEM */
  EVE1__IBUFLA,                         /* 11 : 0x59050000 : EVE_IBUFHA */
  EVE1__IBUFHA,                         /* 12 : 0x59054000 : EVE_IBUFHA */
  EVE1__IBUFLB,                         /* 13 : 0x59070000 : EVE_IBUFHA */
  EVE1__IBUFHB,                         /* 14 : 0x59074000 : EVE_IBUFHA */
  EVE1__EVE_CONTROL,                    /* 15 : 0x59080000 : EVE_CONTROL */
  EVE1__MMU0,                           /* 16 : 0x59081000 : MMU */
  EVE1__MMU1,                           /* 17 : 0x59082000 : MMU */
  EVE1__CTM,                            /* 18 : 0x59085000 : CTM */
  EVE1__TPTC0,                          /* 19 : 0x59086000 : TPTC */
  EVE1__TPTC1,                          /* 20 : 0x59087000 : TPTC */
  EVE1__SMSET_CONF,                     /* 21 : 0x59088000 : SMSET_CONF */
  EVE1__SMSET_SW,                       /* 22 : 0x59089000 : SMSET_SW */
  EVE1__TPCC0,                          /* 23 : 0x590A0000 : TPCC */
  EVE2__DMEM,                           /* 24 : 0x69020000 : EVE_DMEM */
  EVE2__WBUF,                           /* 25 : 0x69040000 : EVE_DMEM */
  EVE2__IBUFLA,                         /* 26 : 0x69050000 : EVE_IBUFHA */
  EVE2__IBUFHA,                         /* 27 : 0x69054000 : EVE_IBUFHA */
  EVE2__IBUFLB,                         /* 28 : 0x69070000 : EVE_IBUFHA */
  EVE2__IBUFHB,                         /* 29 : 0x69074000 : EVE_IBUFHA */
  EVE2__EVE_CONTROL,                    /* 30 : 0x69080000 : EVE_CONTROL */
  EVE2__MMU0,                           /* 31 : 0x69081000 : MMU */
  EVE2__MMU1,                           /* 32 : 0x69082000 : MMU */
  EVE2__CTM,                            /* 33 : 0x69085000 : CTM */
  EVE2__TPTC0,                          /* 34 : 0x69086000 : TPTC */
  EVE2__TPTC1,                          /* 35 : 0x69087000 : TPTC */
  EVE2__SMSET_CONF,                     /* 36 : 0x69088000 : SMSET_CONF */
  EVE2__SMSET_SW,                       /* 37 : 0x69089000 : SMSET_SW */
  EVE2__TPCC0                           /* 38 : 0x690A0000 : TPCC */
} CRED_index_t;

/* =============================================================================
 * EXPORTED VARIABLES
 * =============================================================================
 */

/*-------------------------------------------------------------------------*//**
 * @VARIABLE     CRED_instVirtAddr
 *
 * @BRIEF        Component-instance virtual address array.
 *
 * @DESCRIPTION  Array of virual addresses of all component instances.
 *               The array is initialized with physical addresses, it is
 *               supposed to be changed according to MMU programming.
 *
 *//*------------------------------------------------------------------------ */
extern REG_UWORD32 CRED_instVirtAddr[CRED_NUM_INSTANCES];

/*-------------------------------------------------------------------------*//**
 * @VARIABLE     CRED_instPhysAddr
 *
 * @BRIEF        Component-instance physical address array.
 *
 * @DESCRIPTION  Array of physical addresses of all component instances.
 *               The array is having const members therefore it cannot be
 *               changed by the SW.
 *
 *//*------------------------------------------------------------------------ */
extern const REG_UWORD32 CRED_instPhysAddr[CRED_NUM_INSTANCES];

/*-------------------------------------------------------------------------*//**
 * @VARIABLE     CRED_instName
 *
 * @BRIEF        Component-instance name array.
 *
 * @DESCRIPTION  Array of all component instance names.
 *               The array can be used for debug purpose.
 *
 *//*------------------------------------------------------------------------ */
extern const char* CRED_instName[CRED_NUM_INSTANCES];

/*-------------------------------------------------------------------------*//**
 * @VARIABLE     CRED_instances
 *
 * @BRIEF        Component-instances array.
 *
 * @DESCRIPTION  Array of structures of all component instance information - 
 *               virtual & physical addresses, size and name.
 *               The virtual address is a pointer initialized as corresponding
 *               member in CRED_instVirtAddr array. This mechanism makes sure
 *               the addresses are synchronized between the two arrays and stored
 *               in one place only.
 *
 *//*------------------------------------------------------------------------ */
extern const CRED_instances_t CRED_instances[CRED_NUM_INSTANCES];

#ifdef __cplusplus
}
#endif
#endif  /* __BASEADDRESS_H */

