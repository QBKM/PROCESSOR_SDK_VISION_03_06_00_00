/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2012-2015
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var CurrentPlatform = java.lang.System.getenv("BOARD");
var CurrentSoc = java.lang.System.getenv("SOC");
var CurrentCore = java.lang.System.getenv("CORE");
xdc.print("# !!! Current build BOARD is [" + CurrentPlatform + "] !!!" );
xdc.print("# !!! Current build SOC is [" + CurrentSoc + "] !!!" );
xdc.print("# !!! Current build CORE is [" + CurrentCore + "] !!!" );


xdc.loadCapsule("BIOS_common_m4.cfg");

if (CurrentCore == "ipu1_1")
{
    Core.id = 1;
    GateDualCore.initGates = true;
}

/* section mapping over-ride with respect to default    */
if (CurrentPlatform == "tda3xx-zebu" || CurrentPlatform == "tda2xx-zebu")
{
  Hwi.initStackFlag = false;
  Hwi.checkStackFlag = false;
  Task.initStackFlag = false;
  Task.checkStackFlag = false;
  Program.sectMap[".bss:extMemNonCache:vpdma"]              = "APP_UNCACHED_DATA_BLK3_MEM";
  Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:frameBuffer"].loadSegment           = "APP_CACHED_DATA_BLK1_MEM";
  Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
  Program.sectMap[".bss:tilerBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:tilerBuffer"].loadSegment           = "APP_CACHED_DATA_BLK2_MEM";
  Program.sectMap[".bss:tilerBuffer"].type                  = "NOLOAD";
  if (CurrentCore == "ipu1_1")
  {
    Program.sectMap[".plt"]                                 = "APP_CODE2_MEM";
  }
  else
  {
    Program.sectMap[".plt"]                                 = "APP_CODE_MEM";
  }
  var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
  M3Hwi.resetVectorAddress = (Core.id + 1) * 0 + 0x20000400;
  M3Hwi.vectorTableAddress = M3Hwi.resetVectorAddress;
  Program.sectMap[".ducatiBoot"]  = "L2_RAM";
  Program.sectMap[".bootVecs"]    = "L2_RAM";
  Program.sectMap[".ducatiGates"] = "L2_RAM";
}
else
{
  Program.sectMap[".bss:extMemNonCache:vpdma"]              = "APP_UNCACHED_DATA_BLK3_MEM";
  Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:frameBuffer"].loadSegment           = "APP_CACHED_DATA_BLK1_MEM";
  Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
  if (CurrentSoc != "tda3xx" && CurrentSoc != "tda2ex")
  {
    Program.sectMap[".bss:tilerBuffer"]                     = new Program.SectionSpec();
    Program.sectMap[".bss:tilerBuffer"].loadSegment         = "APP_CACHED_DATA_BLK2_MEM";
    Program.sectMap[".bss:tilerBuffer"].type                = "NOLOAD";
  }
  if (CurrentCore == "ipu1_1")
  {
    Program.sectMap[".plt"]                                 = "APP_CODE2_MEM";
  }
  else
  {
    Program.sectMap[".plt"]                                 = "APP_CODE_MEM";
  }
}

if (CurrentPlatform != "tda3xx-zebu")
{
    if (CurrentPlatform == "tda2xx-interposer" || CurrentSoc == "tda2ex" || CurrentSoc == "tda2xx" || CurrentSoc == "tda2px")
    {
        xdc.loadCapsule("bspCommon_AMMU_512MBDDR.cfg");
    }
    else if (CurrentSoc == "tda3xx")
    {
        xdc.loadCapsule("bspCommon_tda3xx_AMMU_512MBDDR.cfg");
    }
    else
    {
        xdc.loadCapsule("bspCommon_AMMU.cfg");
    }
}

