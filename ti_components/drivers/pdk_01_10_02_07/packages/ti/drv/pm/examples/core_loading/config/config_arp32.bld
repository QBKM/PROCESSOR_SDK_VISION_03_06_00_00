/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2018
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS int32_tERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/*
 *  ======== config_arp32.bld ========
 */

var pdkPath = java.lang.System.getenv("PDK_PM_COMP_PATH");
var soc = java.lang.System.getenv("SOC");

var Build = xdc.useModule('xdc.bld.BuildEnvironment');

var buildReleaseConfig = true;

var Build   = xdc.useModule('xdc.bld.BuildEnvironment');
var ARP32   = xdc.useModule('ti.targets.arp32.elf.ARP32_far');

ARP32.rootDir   = java.lang.System.getenv("CGTOOLS_EVE");

ARP32.ccOpts.suffix += " --symdebug:none --gcc -O3 -DPLATFORM_EVM_SI ";
ARP32.ccOpts.suffix += " -DCHIP_TDA2xx ";
var core = java.lang.System.getenv("CORE");

/* linker options - defined in rules_arp32.mk */
Build.targets     = [
                    ARP32,
                    ];
var MemSegDefine = xdc.loadCapsule("" + pdkPath +
        "/examples/core_loading/config/mem_segment_definition.xs");
if ( soc == "tda3xx" )
{
    ARP32.platforms = ["ti.platforms.evmTDA3XX:EVE_1"
                    ];
    
    ARP32.platform = ARP32.platforms[0];
    
    Build.platformTable["ti.platforms.evmTDA3XX:EVE_1"] =
    {
        externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
        codeMemory:"EVE1_CODE_MEM",
        dataMemory:"EVE1_DATA_MEM",
        stackMemory:"EVE1_DATA_MEM"
    };
}
else
{
    ARP32.platforms = ["ti.platforms.evmDRA7XX:EVE_1",
                    "ti.platforms.evmDRA7XX:EVE_2",
                    "ti.platforms.evmDRA7XX:EVE_3",
                    "ti.platforms.evmDRA7XX:EVE_4",
                    ];
    
    ARP32.platform = ARP32.platforms[3];
    
    Build.platformTable["ti.platforms.evmDRA7XX:EVE_1"] =
    {
        externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
        codeMemory:"EVE1_CODE_MEM",
        dataMemory:"EVE1_DATA_MEM",
        stackMemory:"EVE1_DATA_MEM"
    };
    
    Build.platformTable["ti.platforms.evmDRA7XX:EVE_2"] =
    {
        externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
        codeMemory:"EVE2_CODE_MEM",
        dataMemory:"EVE2_DATA_MEM",
        stackMemory:"EVE2_DATA_MEM"
    };
    
    Build.platformTable["ti.platforms.evmDRA7XX:EVE_3"] =
    {
        externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
        codeMemory:"EVE3_CODE_MEM",
        dataMemory:"EVE3_DATA_MEM",
        stackMemory:"EVE3_DATA_MEM"
    };
    
    Build.platformTable["ti.platforms.evmDRA7XX:EVE_4"] =
    {
        externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
        codeMemory:"EVE4_CODE_MEM",
        dataMemory:"EVE4_DATA_MEM",
        stackMemory:"EVE4_DATA_MEM"
    };
}

