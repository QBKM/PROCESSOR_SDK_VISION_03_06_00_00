/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2018
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS int32_tERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the PM sample                         */
/* ========================================================================== */

/* load the required files and packages                                       */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
var SysStd      = xdc.useModule('xdc.runtime.SysStd');
var System      = xdc.useModule("xdc.runtime.System");
var Program     = xdc.useModule("xdc.cfg.Program");
var Main        = xdc.useModule('xdc.runtime.Main');
var Memory      = xdc.useModule('xdc.runtime.Memory')
var Diags       = xdc.useModule('xdc.runtime.Diags');
var Semaphore   = xdc.useModule("ti.sysbios.knl.Semaphore");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var Log         = xdc.useModule('xdc.runtime.Log');
var LoggerBuf   = xdc.useModule('xdc.runtime.LoggerBuf');
var SysMin      = xdc.useModule('xdc.runtime.SysMin');
var Defaults    = xdc.useModule('xdc.runtime.Defaults');
var CurrentCore = java.lang.System.getenv("CORE");
var Load        = xdc.useModule('ti.sysbios.utils.Load');

/* load calculation related settings */
Load.swiEnabled   = true;
Load.hwiEnabled   = true;
Load.taskEnabled  = true;
Load.updateInIdle = true;
Load.windowInMs   = 500;
Load.postUpdate   = '&BspUtils_prfLoadUpdate';

/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&eveCommonMmuConfig";


/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
/*
 *  ======== Operating System Configuration ========
 */

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x1000;

Program.sectMap[".EVE_MEM"]                 = "DMEM";
Program.sectMap[".bss:taskStackSection"]    = "DMEM";
if (CurrentCore == "arp32_1")
{
    Program.sectMap[".vecs"]                    = "EVE1_VECS_MEM";
    Program.sectMap[".ttbSection"]               = new Program.SectionSpec();
    Program.sectMap[".ttbSection"].loadSegment   = "EVE1_DATA_MEM";
    Program.sectMap[".ttbSection"].type          = "NOINIT";
}
if (CurrentCore == "arp32_2")
{
    Program.sectMap[".vecs"]                    = "EVE2_VECS_MEM";
    Program.sectMap[".ttbSection"]               = "EVE2_DATA_MEM";
    Program.sectMap[".ttbSection"].type          = "NOINIT";
}
if (CurrentCore == "arp32_3")
{
    Program.sectMap[".vecs"]                    = "EVE3_VECS_MEM";
    Program.sectMap[".ttbSection"]               = "EVE3_DATA_MEM";
    Program.sectMap[".ttbSection"].type          = "NOINIT";
}
if (CurrentCore == "arp32_4")
{
    Program.sectMap[".vecs"]                    = "EVE4_VECS_MEM";
    Program.sectMap[".ttbSection"]               = "EVE4_DATA_MEM";
    Program.sectMap[".ttbSection"].type          = "NOINIT";
}
Program.sectMap["ibufha_data_section"]      = "IBUFHA";
Program.sectMap["ibufla_data_section"]     = "IBUFLA";
Program.sectMap["wbuf_data_section"]        = "WBUF";
Program.sectMap[".vcop_parameter_block"]    = "WBUF";

System.SupportProxy = SysStd;

/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;


/* configure the required Heap parameters                                     */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var prms    = new HeapMem.Params;
prms.size = 8192;
var heap = HeapMem.create(prms);

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = heap;


var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Utils_idleFxn');

/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* allocate timer 1 & 2 & 3 to DSP */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x0007;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* system clock runs at 20 MHz */
Timer.intFreqs[0].hi = 0;
Timer.intFreqs[0].lo = 20000000;
var timerParams = new Timer.Params();
timerParams.period = 100*1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;
timerParams.intNum = 36;
Timer.create(0, '&mainTimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[1].hi = 0;
DMTimer.intFreqs[1].lo = 20000000;
DMTimer.checkFrequency = 0;
timerParams2.period = 33 * 1000;
timerParams2.twer.ovf_wup_ena = 1;
timerParams2.tiocpCfg.emufree = 1;
Timer.create(1, '&triggerRun', timerParams2);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[2].hi = 0;
DMTimer.intFreqs[2].lo = 20000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 2;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

