/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2018
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS int32_tERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the PM sample                         */
/* ========================================================================== */

/* load the required files and packages                                       */
var Task      = xdc.useModule("ti.sysbios.knl.Task");
var BIOS      = xdc.useModule("ti.sysbios.BIOS");
var System    = xdc.useModule("xdc.runtime.System");
var SysStd    = xdc.useModule('xdc.runtime.SysStd');
var Cache       = xdc.useModule('ti.sysbios.hal.unicache.Cache');
var HalCache    = xdc.useModule('ti.sysbios.hal.Cache');
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
var Hwi       = xdc.useModule('ti.sysbios.hal.Hwi');
var Sem       = xdc.useModule("ti.sysbios.knl.Semaphore");
var Log       = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Memory    = xdc.useModule('xdc.runtime.Memory')
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var System       = xdc.useModule('xdc.runtime.System');
var Defaults     = xdc.useModule('xdc.runtime.Defaults');
var Main         = xdc.useModule('xdc.runtime.Main');
var Diags        = xdc.useModule('xdc.runtime.Diags');
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var Program      = xdc.useModule("xdc.cfg.Program");
var CurrentCore  = java.lang.System.getenv("CORE");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var soc = java.lang.System.getenv("SOC");

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x5000;

/* Enable cache */
Cache.enableCache = true;

Program.sectMap[".intc_text"]             = "L2_ROM";
Program.sectMap[".intvecs"]               = "L2_ROM";
Program.sectMap[".TI.noinit"]             = "L2_ROM";

/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;

/* load calculation related settings */
Load.swiEnabled   = true;
Load.hwiEnabled   = true;
Load.taskEnabled  = true;
Load.updateInIdle = true;
Load.windowInMs   = 500;
Load.postUpdate   = '&BspUtils_prfLoadUpdate';

System.SupportProxy = SysStd;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/* configure the required Heap parameters                                     */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var prms    = new HeapMem.Params;
prms.size = 8192;
var heap = HeapMem.create(prms);

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = heap;


var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Utils_idleFxn');

/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* allocate timer 4, 5, 6 to IPU0 */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x0038;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
Timer.intFreqs[5].hi = 0;
/* system clock runs at 20 MHz */
Timer.intFreqs[5].lo = 20000000;
var timerParams = new Timer.Params();
timerParams.period = 1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;
timerParams.intNum = 55;
Timer.create(5, '&mainTimerTick', timerParams);

/* Assign GPTimer5 to be used for Timestamp */
/* Timer ID = 4 for GPTimer5 and input clock runs at 20 MHz */
var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[4].hi = 0;
DMTimer.intFreqs[4].lo = 20000000;
DMTimer.checkFrequency = 0;
timerParams2.period = 33 * 1000;
timerParams2.twer.ovf_wup_ena = 1;
timerParams2.tiocpCfg.emufree = 1;
timerParams2.intNum = 56;
Timer.create(4, '&triggerRun', timerParams2);

/* Assign GPTimer6 to be used for Timestamp */
/* Timer ID = 3 for GPTimer4 and input clock runs at 20 MHz */
var GPTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
GPTimer.intFreqs[3].hi = 0;
GPTimer.intFreqs[3].lo = 20000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 3;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

/* Assign the cross bar for the Interrupt Number */
var IntXbar = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
IntXbar.connectIRQMeta(55, 37);
IntXbar.connectIRQMeta(56, 36);

if ((CurrentCore == "ipu1_0") && (soc != "tda3xx" ))
{

    xdc.print("# !!!  Performing AMMU Configuration !!!" );
    var Program = xdc.useModule('xdc.cfg.Program');
    var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;
    
    var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');
    AMMU.configureAmmu = true;
    
    /*********************** Medium Pages *************************/
    
    /* ISS */
    var entry = AMMU.mediumPages[0];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x62200000;
    entry.translatedAddress = 0x42200000;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.size = AMMU.Medium_256K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_THROUGH;
    entry.L1_allocate    = AMMU.AllocatePolicy_NON_ALLOCATE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* ISS */
    var entry = AMMU.mediumPages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x62240000;
    entry.translatedAddress = 0x42240000;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.size = AMMU.Medium_256K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_THROUGH;
    entry.L1_allocate    = AMMU.AllocatePolicy_NON_ALLOCATE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /*********************** Small Pages *************************/
    
    /* EVE1 MBOX0 */
    var entry = AMMU.smallPages[2];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x62088000;
    entry.translatedAddress = 0x42088000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* EVE1 MBOX1 */
    var entry = AMMU.smallPages[3];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x6208C000;
    entry.translatedAddress = 0x4208C000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* EVE2 MBOX0 */
    var entry = AMMU.smallPages[4];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x62188000;
    entry.translatedAddress = 0x42188000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* EVE2 MBOX1 */
    var entry = AMMU.smallPages[5];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x6218C000;
    entry.translatedAddress = 0x4218C000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* System EDMA TPCC */
    var entry = AMMU.smallPages[6];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x63300000;
    entry.translatedAddress = 0x43300000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* System EDMA TPCC */
    var entry = AMMU.smallPages[7];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x63304000;
    entry.translatedAddress = 0x43304000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* System Mailbox 5, 6 */
    var entry = AMMU.smallPages[8];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x68840000;
    entry.translatedAddress = 0x48840000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* System Mailbox 7, 8 */
    var entry = AMMU.smallPages[9];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x68844000;
    entry.translatedAddress = 0x48844000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /*********************** Large Pages *************************/
    var entry = AMMU.largePages[0];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x40000000;
    entry.translatedAddress = 0x40000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* map program code/data memory into ammu (cacheable) */
    var entry = AMMU.largePages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x80000000;
    entry.translatedAddress = 0x80000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L1_allocate = AMMU.AllocatePolicy_ALLOCATE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
    
    /* map SR_0 data memory into ammu (non-cacheable) */
    var entry = AMMU.largePages[2];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0xA0000000;
    entry.translatedAddress = 0x80000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
}
