/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2018
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS int32_tERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* ========================================================================== */
/*                      CFG script for the PM sample                         */
/* ========================================================================== */

/* load the required files and packages                                       */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var Idle        = xdc.useModule("ti.sysbios.knl.Idle");
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
var Startup     = xdc.useModule("xdc.runtime.Startup");
var SysStd      = xdc.useModule("xdc.runtime.SysStd");
var System      = xdc.useModule("xdc.runtime.System");
var Log         = xdc.useModule("xdc.runtime.Log");
var Assert      = xdc.useModule("xdc.runtime.Assert");
var Program     = xdc.useModule("xdc.cfg.Program");
var Main        = xdc.useModule("xdc.runtime.Main");
var Memory      = xdc.useModule("xdc.runtime.Memory");
var Diags       = xdc.useModule("xdc.runtime.Diags");
var Semaphore   = xdc.useModule("ti.sysbios.knl.Semaphore");
var HeapMem     = xdc.useModule("ti.sysbios.heaps.HeapMem");
var HeapBuf     = xdc.useModule("ti.sysbios.heaps.HeapBuf");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var Queue       = xdc.useModule('ti.sysbios.knl.Queue');
var SyncSem     = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Cache       = xdc.useModule('ti.sysbios.hal.Cache');
var halCore     = xdc.useModule('ti.sysbios.hal.Core');
var GateH       = xdc.useModule('xdc.runtime.knl.GateH');
var Event       = xdc.useModule('ti.sysbios.knl.Event');
var biosGates   = xdc.useModule('ti.sysbios.gates.GateTask');

/*var SysMin    = xdc.useModule('xdc.runtime.SysMin');*/
var Defaults     = xdc.useModule('xdc.runtime.Defaults');
var CurrentCore  = java.lang.System.getenv("CORE");
var Error = xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Registry');

/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;     /* needed for asserts */
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;     /* development only   */
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;

BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 588000000; /* 588 MHz */
BIOS.smpEnabled = false;

/* load calculation related settings */
Load.swiEnabled   = true;
Load.hwiEnabled   = true;
Load.taskEnabled  = true;
Load.updateInIdle = true;
Load.windowInMs   = 500;
Load.postUpdate   = '&BspUtils_prfLoadUpdate';

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x400000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/*Program.sectMap[".intc_text"]             = "L2_ROM";
Program.sectMap[".intvecs"]                = "L2_ROM";*/

/* Board data and code sections need to go into OCMC when board is supported */
Program.sectMap["BOARD_IO_DELAY_DATA"] = "OCMC_RAM1";
Program.sectMap["BOARD_IO_DELAY_CODE"] = "OCMC_RAM1";

System.SupportProxy = SysStd;

/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;


/* configure the required Heap parameters                                     */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var prms    = new HeapMem.Params;
prms.size = 8192;
var heap = HeapMem.create(prms);

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = heap;

var Cache = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
Cache.enableCache = true;

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
Mmu.enableMMU = true;

/******************************************************************************
 *
 * SYS/BIOS assigns the following defaults to MAIR0 ATTR0, ATTR1 and ATTR2:
 *
 * ATTR0 -> 0x44 (mark memory region as non-cacheable normal memory)
 * ATTR1 -> 0x00 (mark memory region as device memory, i.e. strongly
 * ordered and non-cacheable)
 * ATTR2 -> 0xFF (mark memory region as normal memory, RW cacheable and
 * RW allocate)
 ******************************************************************************
 */

// descriptor attribute structure
var attrs0 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs0);
attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.shareable = 2;                      // sharerable
attrs0.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
// Set OCMC memories as shareable and cacheable in case Board package is used
for (var i=0x40000000; i < 0x40600000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}

attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.noExecute = true;                   // not executable
attrs0.accPerm = 0;                        // read/write at PL1
attrs0.shareable = 2;                      // shareable
attrs0.attrIndx = 1;                       // strongly ordered and non-cacheable

// Set the descriptor for each entry in the address range
// Remaining OCMC region configured as non-cacheable, device memory.
for (var i=0x40600000; i < 0x60000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}

// descriptor attribute structure
var attrs1 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs1);
attrs1.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs1.shareable = 2;                      // sharerable
attrs1.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
for (var i=0x80000000; i < 0xA0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}

// descriptor attribute structure
var attrs2 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs2);
attrs2.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs2.shareable = 2;                      // sharerable
attrs2.attrIndx = 0;                       // Non-cache, normal memory

// Set the descriptor for each entry in the address range
for (var i=0xA0000000; i < 0xC0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i-0x20000000, attrs2);
}


var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Utils_idleFxn');


/* Assign GPTimer2 to be used for BIOS Clock 1-ms tick */
/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* Indicate 7 & 8 & 9 are used */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x01C0;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/

/* Set to 1-ms Tick and Enable Wakeup for OVF interrupt */
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams = new Timer.Params();
timerParams.period = 1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;
/* Timer ID = 1 for GPTimer2 and input clock runs at 20 MHz */
Timer.intFreqs[6].hi = 0;
Timer.intFreqs[6].lo = 20000000;
Timer.checkFrequency = 0;
Timer.create(6, '&mainTimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[7].hi = 0;
DMTimer.intFreqs[7].lo = 20000000;
DMTimer.checkFrequency = 0;
timerParams2.period = 33 * 1000;
timerParams2.twer.ovf_wup_ena = 1;
timerParams2.tiocpCfg.emufree = 1;
Timer.create(7, '&triggerRun', timerParams2);

var GPTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new GPTimer.Params();
timerParams2.tsicr.posted = 0;
GPTimer.intFreqs[8].hi = 0;
GPTimer.intFreqs[8].lo = 20000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 8;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;